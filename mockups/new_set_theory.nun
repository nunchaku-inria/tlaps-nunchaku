# should be unspecified but infinite
data u := Z | S u.

val a : type.

val g : a -> u.

val mem : u -> u -> prop.

# extensionality
axiom forall (A : a) (B : a). g A = g B || (exists (x : a). ~ (mem (g x) (g A) = mem (g x) (g B))).

rec Mem : u -> u -> prop :=
  forall x y. Mem x y = unique_unsafe (fun P. P = mem x y && (exists a. g a = x) && (exists b. g b = y)).

val trans_mem : a -> a -> prop.

# overapproximation of transitive closure
axiom forall x (y : a). mem (g x) (g y) => trans_mem x y.
axiom forall x y (z : a). trans_mem x y && mem (g y) (g z) => trans_mem x z.

# acyclicity
axiom forall x. ~ trans_mem x x.

# empty set
rec emptyset : u :=
  emptyset = unique_unsafe (fun A. forall a. ~ mem (g a) A && (exists a. g a = A)).

# subset
rec subset : u -> u -> prop :=
  forall A B. subset A B = (forall a. Mem (g a) A => Mem (g a) B).

# union
rec union : u -> u -> u :=
  forall A B. union A B = unique_unsafe (fun C. forall x. Mem (g x) C = (Mem (g x) A || Mem (g x) B)).

# intersection
rec inter : u -> u -> u :=
  forall A B. inter A B = unique_unsafe (fun C. forall x. Mem (g x) C = (Mem (g x) A && Mem (g x) B)).

# substraction
rec minus : u -> u -> u :=
  forall A B. minus A B = unique_unsafe (fun C. forall x. Mem (g x) C = (Mem (g x) A && ~(Mem (g x) B))).

# powerset
rec Pow : u -> u :=
  forall B. Pow B = unique_unsafe (fun C. forall A. Mem (g A) C = subset (g A) B).

# big union
rec Union : u -> u :=
  forall A. Union A = unique_unsafe (fun U. forall x. Mem (g x) U = (exists X. Mem (g x) (g X) and Mem (g X) (g A))).

val v : u.
val w : u.
val x : u.
val y : u.
val z : u.

goal ~ (x = y) && ~ (y = z) && ~ (x = z) && x = union y z.

# goal x = Pow y.
