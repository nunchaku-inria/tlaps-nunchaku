# a_u = alpha_u
val up : a_u -> u. # upcast

# mem is only defined on elements of a_u

rec subseteq : u -> u -> prop :=
	forall (x : a_u) (y : a_u).
		subseteq (up x) (up y) = 
			(forall (z : a_u). 
				mem (up z) (up x) => mem (up z) (up y)).

# Application extentionality:
axiom app_ext :
	forall (f : a_u) (g : a_u).
			(dom (up f) = dom (up g))
		and
			forall (x : a_u).
					mem (up x) (dom (up f)) => app (up f) (up x) = app (up g) (up x)
				and
					exists (z : a_u). app (up f) (up x) = (up z)
		=> (f = g).
