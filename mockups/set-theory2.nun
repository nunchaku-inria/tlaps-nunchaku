val u : type.

# SET THEORY

val emptySet : u.
val is_in : u -> u -> prop.

# val cup : u -> u -> u.
# val cap : u -> u -> u.
# val setminus : u -> u -> u.

val singleton : u -> u.
axiom forall x. (singleton x) != emptySet.

pred  is_in : u -> u -> prop :=
     forall x. is_in (singleton x) x.
#     forall a b x. ((is_in a x) && (is_in b x)) => (is_in (cap a b) x);
#     forall a b x. ((is_in a x) || (is_in b x)) => (is_in (cup a b) x).
#     forall a b x. ((is_in a x) && (~(is_in b x))) => (is_in (setminus a b) x).

# empty set
axiom forall x. ~(is_in emptySet x).

# extentionality
axiom forall x y. ((x = y) || (exists z. ~(is_in x z && is_in y z))).

# well-founded
pred [wf] trans_is_in : u -> u -> prop :=
  forall x y. is_in x y => trans_is_in x y;
  forall x y z. is_in y x && is_in z y => trans_is_in z x.
axiom forall x. ~ (trans_is_in x x).


# goal exists x y a b. ~(is_in (cap a b) x) && (is_in b x) && (is_in (cap a b) y).
goal exists (x:u).(x!=emptySet).