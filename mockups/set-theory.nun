# SET THEORY

val mem : u -> u -> prop.

# empty set
val emptySet : u.
axiom forall x. ~(is_in x emptySet).

# extentionality
axiom forall x y. ((x = y) || (exists z. ~(is_in z x <=> is_in z y))).

# acyclic
pred [wf] trans_is_in : u -> u -> prop :=
     forall x y. is_in x y => trans_is_in x y;
     forall x y z. is_in y x && is_in z y => trans_is_in z x.
axiom forall x. ~ (trans_is_in x x).

# union
val p_union : u -> u -> u -> prop :=
    forall a b c. p_union a b c = (forall x:u. mem x c = (mem x a || mem x b)).
val union : u -> u -> u :=
	forall a b. union a b = unique (p_union a b).
		
# intersection
val p_inter : u -> u -> u -> prop :=
    forall a b c. p_inter a b c = (forall x:u. mem x c <=> mem x a && mem x b).
val inter : u -> u -> u :=
	forall a b. inter a b = unique (p_inter a b).

# substraction
val p_minus : u -> u -> u -> prop :=
    forall a b c. p_minus a b c = (forall x:u. mem x c <=> mem x a && ~(mem x b)).
val minus : u -> u -> u :=
	forall a b. minus a b = unique (p_minus a b).

# powerset
val p_power : u -> u -> prop :=
    forall a b. p_power a b = (forall c:u. mem c b <=> (forall x:u. mem x c => mem x a)).
val power : u -> u :=
	forall a. power a = unique (p_power a).

# big union
val p_bigunion : u -> u -> prop :=
    forall a b. p_bigunion a b = (forall x:u. mem x b <=> (exists y:u. mem y a and mem x y)).
val bigunion : u -> u :=
	forall a. bigunion a = unique (p_bigunion a).
