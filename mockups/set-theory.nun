# SET THEORY
# u, alpha_u and upcast should already be declared

val mem_raw : u -> u -> prop.

# extensionality
axiom forall (A : alpha_u) (B : alpha_u). upcast A = upcast B || (exists (x : alpha_u). ~ (mem_raw (upcast x) (upcast A) = mem_raw (upcast x) (upcast B))).

rec mem : u -> u -> prop :=
   forall x y. mem x y = (mem_raw x y asserting ((exists a. upcast a = x) && (exists b. upcast b = y))).

val trans_mem : alpha_u  -> alpha_u -> prop.

# overapproximation of transitive closure
axiom forall x (y : alpha_u). mem_raw (upcast x) (upcast y) => trans_mem x y.
axiom forall x y (z : alpha_u). trans_mem x y && mem_raw (upcast y) (upcast z) => trans_mem x z.

# acyclicity
axiom forall x. ~ trans_mem x x.

# empty set
rec emptyset : u :=
  emptyset = unique_unsafe (fun A. forall a. ~ mem_raw (upcast a) A && (exists a. upcast a = A)).

# subset
rec subset : u -> u -> prop :=
  forall A B. subset A B = (forall a. mem (upcast a) A => mem (upcast a) B).

# union
rec union : u -> u -> u :=
  forall A B. union A B = unique_unsafe (fun C. forall x. mem (upcast x) C = (mem (upcast x) A || mem (upcast x) B)).

# intersection
rec inter : u -> u -> u :=
  forall A B. inter A B = unique_unsafe (fun C. forall x. mem (upcast x) C = (mem (upcast x) A && mem (upcast x) B)).

# substraction
rec minus : u -> u -> u :=
  forall A B. minus A B = unique_unsafe (fun C. forall x. mem (upcast x) C = (mem (upcast x) A && ~(mem (upcast x) B))).

# powerset
rec Pow : u -> u :=
  forall B. Pow B = unique_unsafe (fun C. forall A. mem (upcast A) C = subset (upcast A) B).

# big union
rec Union : u -> u :=
  forall A. Union A = unique_unsafe (fun U. forall x. mem (upcast x) U = (exists X. mem (upcast x) (upcast X) && mem (upcast X) A)).
